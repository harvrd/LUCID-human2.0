 Testing. Cool. Scenario two. You are a quantum physicist, working on a team developing a new quantum computer. You must consider factors such as qubit, coherence error correction and quantum algorithms. What types of qubits would be most effective for this quantum computer? And why.           Yeah. I guess there are two possible types of qubits. We could use superconducting qubits and trapped ionic qubits. Yeah? Super deducted qubits. They're just less susceptible to decoherence. And trapped ion qubits are also just generally. Highly stable.  Sounds good. Yeah. Okay. Sounds good. All right. And what methods would you use to improve qubit coherence and minimize errors in the system? And why.       Okay, there could be. There are a few strategies that I am thinking of. One is error correction codes. I mean in general, I think. If we can track and detect for errors, it's better for us to realize that they are there and thus. We can. Go correct for them. We could do more like physical oriented. Things like keeping the temperature of the qubits low. I guess that high temperatures they had there's more noise and. There's less coherence. Generally just using high quality materials and other physical. Aspect of it. Yeah. Then also be thoughtful about how we design and place these qubits in different locations. On the computer. Awesome. Sounds good. What types of quantum algorithms would be most effective for this quantum computer? And why.  This quantum computer, we just mean the one you're describing like the one that has our like that uses. The qubits that I was talking about, and. These error correction algorithms and or strategies. Yes.    What are types of algorithms that work well on quantum computers using superconducting or trapped ion qubits.    Okay. In general, I guess it's any algorithm that can. Leverage the power of simultaneous operations on multiple qubits to my understanding, is actually almost any more complex. Quantum Computing algorithm but. Sure the algorithm is one of them. Along lines of anything that's more complex quantum simulation and quantum optimization algorithms. Ml algorithms. Cryptography. Yes. Anything. That's more complex that we can leverage. The increased. Or the decreased decoherence. Of the. Awesome sounds good and finally. What other factors would you need to consider when you're developing the quantum computer. And how would you balance those factors against each other.   Yeah, conceptually. I think. Really making any trade off is. About. Figuring out what the downstream use cases are for. And so yeah, figuring out. Okay, who's going to be using this? What are they trying to achieve. Why are they using it? And then we can figure out, okay, what are the sort of specific trade offs we want to make for them. The first question in terms of the actual factors to consider. There's a number of them power consumption and cooling requirements. We have the cost of making the physical devices and maintenance of them. Scalability. Of making a bunch of them. And the potential for upgrading them in the future. We want them to integrate with existing computing infrastructure. But if that changes, we want to be flexible. We also want to be thinking about the personnel aspect. Quantum computing being a relatively new technology. May have. Specific or required specific experience that may not be super common. Awesome. Sounds good. Those are all the questions for scenario two and you are done. So we have one more scenario and you can take that off if you want.